import UIKit

let (x, y) = (1, 2)
// x is equal to 1, and y is equal to 2

var unsignedOverflow = UInt8.max
// unsignedOverflow equals 255, which is the maximum value a UInt8 can hold
unsignedOverflow = unsignedOverflow &+ 1
// unsignedOverflow is now equal to 0

//Compound assignment operator
var a = 1
a += 2

//The compound assignment operators don’t return a value. For example,
//you can’t write let b = a += 2.

//tuple comparison
(1, "zebra") < (2, "apple")   // true because 1 is less than 2; "zebra" and "apple" are not compared
(3, "apple") < (3, "bird")    // true because 3 is equal to 3, and "apple" is less than "bird"
(4, "dog") == (4, "dog")      // true because 4 is equal to 4, and "dog" is equal to "dog"
("blue", -1) < ("purple", 1)        // OK, evaluates to true

//("blue", false) < ("purple", true)  // Error because < can't compare Boolean values

//Nil-Coalescing Operator ??. It also unwraps
let defaultColorName = "red"
var userDefinedColorName: String?   // defaults to nil

var colorNameToUse = userDefinedColorName ?? defaultColorName

// RANGE Opertor ...

//close range
for index in 1...5 {
    print("\(index) times 5 is \(index * 5)")
}

// half open range
let names = ["Anna", "Alex", "Brian", "Jack"]
let count = names.count
// if 0 below is say 10 , you will get an exception
for i in 0..<count {
    print("Person \(i + 1) is called \(names[i])")
}
//One sided range
for name in names[2...] {
    print(name)
}
for name in names[...2] {
    print(name)
}
//half open with one sided
for name in names[..<2] {
    print(name)
}
//range has
let range = ...5
range.contains(7)   // false
range.contains(4)   // true
range.contains(-143598353)  // true


//short circuit eval
if false && true && true { //all true are never eval
    print("Welcome!")
}
