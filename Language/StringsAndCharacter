

//Initializing empty strings
var emptyString = ""               // empty string literal
var anotherEmptyString = String()  // initializer syntax
//isEmpty method
if emptyString.isEmpty {
    print("Nothing to see here")
}

//String mutability - only var no let
var variableString = "Horse"
variableString += " and carriage"

//accessing char in a string
for character in "Dog!üê∂" {
    print(character)
}

// A character
let exclamationMark: Character = "!"

//Char to String
let catCharacters: [Character] = ["C", "a", "t", "!", "üê±"]
let catString = String(catCharacters)

variableString.append(exclamationMark)  // char append to string WORKS


//String Interpolation
let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"

// Unicode scalar
let dollarSign = "\u{24}"        // $,  Unicode scalar U+0024
print(dollarSign)

//extended grapheme cluster - counts as one char
let combinedEAcute: Character = "\u{65}\u{301}"

//String and Indexes
//Each String value has an associated index type, String.Index,
//which corresponds to the position of each Character in the string.
let greeting = "Guten Tag!"
greeting[greeting.startIndex]
// G
//end index is after the end of the string
greeting[greeting.index(before: greeting.endIndex)]
//greeting[greeting.endIndex] // Error
//greeting.index(after: greeting.endIndex) // Error
// !
greeting[greeting.index(after: greeting.startIndex)]
// u
let index = greeting.index(greeting.startIndex, offsetBy: 7)
greeting[index]
// a

//indicies
for index in greeting.indices {
    print("\(greeting[index]) ", terminator: "")
}
// Prints "G u t e n   T a g ! "

//insert and remove
var welcome = "hello"
welcome.insert("!", at: welcome.endIndex)
// welcome now equals "hello!"

welcome.insert(contentsOf: " there", at: welcome.index(before: welcome.endIndex))
// welcome now equals "hello there!"

welcome.remove(at: welcome.index(before: welcome.endIndex))
// welcome now equals "hello there"

// range as a value type
let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex
// use subrange to move
welcome.removeSubrange(range)
// welcome now equals "hello"

//subsstrings - use array subscripts
/*
 When you get a substring from a string‚Äîfor example, using a subscript or a method like prefix(_:)‚Äîthe result is an instance of Substring, not another string. Substrings in Swift have most of the same methods as strings, which means you can work with substrings the same way you work with strings. However, unlike strings, you use substrings for only a short amount of time while performing actions on a string. When you‚Äôre ready to store the result for a longer time, you convert the substring to an instance of String. */

//let index = greeting.firstIndex(of: ",") ?? greeting.endIndex  .. this gives an error why?
//let beginning = greeting[..<index]
// beginning is "Hello"

// Convert the result to a String for long-term storage.
//let newString = String(beginning)

//String equality
let quotation = "We're a lot alike, you and I."
let sameQuotation = "We're a lot alike, you and I."
if quotation == sameQuotation {
    print("These two strings are considered equal")
}
//prefix starts at beginning

if(quotation.hasPrefix("We're a lot")) {
    print("has prefix lot")
} else {
    print("no prefix lot")
}
//suffiox is end
if(quotation.hasSuffix("you and I.")) {
    print("has suffix")
} else {
    print("has no suffix")
}

//unicode utf8 encoding
let dogString = "Dog‚Äºüê∂"
for codeUnit in dogString.utf8 {
    print("\(codeUnit) ", terminator: "")
}
print("")
// Prints "68 111 103 226 128 188 240 159 144 182 "

//utf16
for codeUnit in dogString.utf16 {
    print("\(codeUnit) ", terminator: "")
}
print("")
// Prints "68 111 103 8252 55357 56374 "

//unicode point or scalar
for scalar in dogString.unicodeScalars {
    print("\(scalar.value) ", terminator: "")
}
print("")
// Prints "68 111 103 8252 128054 "
for scalar in dogString.unicodeScalars {
    print("\(scalar) ")
}


